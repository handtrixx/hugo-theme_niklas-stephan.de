start();

function start() {
  //if the user has a theme stored in local storage, set it
  const storeTheme = localStorage.getItem("theme");
  if (storeTheme === "light") {
    document.documentElement.setAttribute("data-bs-theme", "light");
  }
  if (storeTheme === "dark") {
    document.documentElement.setAttribute("data-bs-theme", "dark");
  }
  //if the user has a language stored in local storage, set it
  const storeLanguage = localStorage.getItem("language");
  if (storeLanguage) {
    document.documentElement.setAttribute("lang", storeLanguage);
    document.getElementById("langcode").innerHTML = storeLanguage;
  }
  //if the user has a fontsize stored in local storage, set it
  const storeFontsize = localStorage.getItem("fontsize");
  if (storeFontsize) {
    document.documentElement.style.fontSize = storeFontsize;
  }
  console.log("This site was generated by Hugo.");
}

function themeswitch() {
  const currentTheme = document.documentElement.getAttribute("data-bs-theme");
  if (currentTheme === "light") {
    document.documentElement.setAttribute("data-bs-theme", "dark");
    localStorage.setItem("theme", "dark");
  } else {
    document.documentElement.setAttribute("data-bs-theme", "light");
    localStorage.setItem("theme", "light");
  }
}

function languageswitch() {
  const currentLanguage = document.documentElement.getAttribute("lang");
  const button = document.getElementById("languageswitch");
  const languages = JSON.parse(button.getAttribute("data-languages"));

  //loop through the languages array
  for (let i = 0; i < languages.length; i++) {
    if (currentLanguage === languages[i].Lang) {
      if (i + 1 < languages.length) {
        document.documentElement.setAttribute("lang", languages[i + 1].Lang);
        document.getElementById("langcode").innerHTML = languages[i + 1].Lang;
        localStorage.setItem("language", languages[i + 1].Lang);
        break;
      } else {
        document.documentElement.setAttribute("lang", languages[0].Lang);
        document.getElementById("langcode").innerHTML = languages[0].Lang;
        localStorage.setItem("language", languages[0].Lang);
        break;
      }
    }
  }
}

function fontswitch(task) {
  const root = document.documentElement;
  const currentFontSize = parseInt(
    getComputedStyle(root).getPropertyValue("font-size")
  );

  switch (task) {
    case "smaller":
      root.style.fontSize = currentFontSize
        ? currentFontSize - 1 + "px"
        : "1rem";
      localStorage.setItem("fontsize", root.style.fontSize);
      break;
    case "bigger":
      root.style.fontSize = currentFontSize
        ? currentFontSize + 1 + "px"
        : "1rem";
      localStorage.setItem("fontsize", root.style.fontSize);
      break;
    case "reset":
      root.style.removeProperty("font-size");
      localStorage.removeItem("fontsize");
      break;
    default:
      root.style.removeProperty("font-size");
      localStorage.removeItem("fontsize");
  }
}

function togglePageAssistant() {
  const assistantButton = document.getElementById("page-assitant-toggler");
  const pageContent = document.getElementById("page-content");
  const pageAssistant = document.getElementById("page-assistant");
  const footer = document.getElementById("footer");

  if (pageAssistant.classList.contains("d-none")) {
    pageAssistant.classList.remove("d-none");
    pageContent.classList.add("d-none");
    footer.classList.add("d-none");
    
    
  }
  else {
    pageAssistant.classList.add("d-none");
    pageContent.classList.remove("d-none");
    footer.classList.remove("d-none");
   
  }
}